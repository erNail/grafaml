---
# -- Wether to render only the dashboard JSON, or the entire ConfigMap.
onlyRenderDashboardJson: false

# -- The api versions of the resources created by this chart.
#
# Ref: https://kubernetes.io/docs/reference/using-api/deprecation-guide/
apiVersions:
  configMap: "v1"

# -- Use this to override the name of the chart.
nameOverride: ""

# -- Use this to override the fullname of the chart.
fullnameOverride: ""

# -- Use this to override the namespace of the chart.
# By default, `.Release.Namespace` is used.
namespaceOverride: ""

# -- Additional labels to add to the ConfigMap.
extraLabels:
  grafana_dashboard: "1"

# -- The unique identifier of the Dashboard.
# If not set, the sha1sum of {{ .names.fullname }} will be used.
# When setting a value, make sure it is unique across all dashboards in your Grafana instance.
# The value must be between 8 and 40 characters.
#
# Ref: https://grafana.com/docs/grafana/latest/dashboards/build-dashboards/view-dashboard-json-model/#json-fields
uid: ""

# -- The base definition of the Dashboard.
# This field can contain any valid Grafana JSON Dashboard model as YAML.
# It must **not contain the `panels` field**. Check `.Values.panels` for more information.
# It must **not contain the `uid` field**. Check `.Values.uid` for more information.
# Be aware that Grafana does not provide a full overview of all available fields.
# To find out about other options, it's possible to create the desired dashboard in the UI, then inspect the JSON.
#
# Ref: https://grafana.com/docs/grafana/latest/dashboards/build-dashboards/view-dashboard-json-model/#json-fields
dashboardBase:
  title: "Grafana Dashboard"
  # -- The tags of the dashboard.
  tags:
    - "grafaml"

# -- The configuration of the automatically positioned panels.
panels:
  # -- The number of columns of the grid in which the panels are placed.
  # With 2 columns, each panel will have a width of 12 grid units
  columns: 2
  # -- The height of each panel in grid units.
  panelHeight: 8
  # -- The list of panels
  # Each item can contain any valid Grafana JSON Panel model as YAML.
  # Be aware that Grafana does not provide a full overview of all available fields.
  # To find out about other options, it's possible to create the desired dashboard in the UI, then inspect the JSON.
  # For example dashboards created with grafaml,
  # check out the [example charts](https://github.com/erNail/grafaml/tree/main/example-charts)
  #
  list:
    - title: "Prometheus Targets Up"
      type: "stat"
      targets:
        - expr: "up"
    - title: "Resource Usage in Percent"
      description: "Memory and CPU Usage"
      type: "stat"
      targets:
        - expr: "(1 - (node_memory_MemAvailable_bytes / node_memory_MemTotal_bytes)) * 100"
          legendFormat: "Memory Usage"
        - expr: "sum by (instance, job)(avg by (mode, instance) (rate(node_cpu_seconds_total{mode!='idle'}[2m]))) * 100"
          legendFormat: "CPU Usage"
    - title: "Memory Usage in Percent over Time"
      type: "timeseries"
      targets:
        - expr: "(1 - (node_memory_MemAvailable_bytes / node_memory_MemTotal_bytes)) * 100"
    - title: "CPU Usage in Percent over Time"
      type: "timeseries"
      targets:
        - expr: "sum by (instance, job) (avg by (mode, instance) (rate(node_cpu_seconds_total{mode!='idle'}[2m])))"
...
